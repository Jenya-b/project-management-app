{"version":3,"file":"static/js/474.bf4672cd.chunk.js","mappings":"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","sources":["hooks/useAppDispatch.ts","hooks/useAppSelector.ts","modules/components/button/index.tsx","modules/components/confirmationDialog/index.tsx","modules/components/errorSnackbar/errorSnackbar.tsx","modules/constants/constHeader.ts","modules/components/header/newProjectModal/index.tsx","modules/components/header/index.tsx","modules/components/modal/index.tsx","modules/components/requireUser/index.tsx","modules/constants/constGlobal.ts","modules/components/task/index.tsx","modules/components/column/index.tsx","modules/pages/board/Board.tsx","modules/pages/board/index.tsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\r\nimport { AppDispatch } from '../store/store';\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\n","import { useSelector, TypedUseSelectorHook } from 'react-redux';\r\nimport { RootStateType } from '../modules/types';\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<RootStateType> = useSelector;\r\n","import { Button } from '@mui/material';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { PRIMARY_COLOR } from '../../constants/constGlobal';\r\nimport { ButtonType } from '../../types';\r\n\r\nexport const PrimaryBtn = ({ variant, text, onClick }: ButtonType) => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <Button variant={variant} sx={{ backgroundColor: PRIMARY_COLOR }} onClick={onClick}>\r\n      {t(text)}\r\n    </Button>\r\n  );\r\n};\r\n","import DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { ConfirmationDialogType } from '../../types';\r\nimport './index.scss';\r\n\r\nexport const ConfirmationDialog = ({ title, desc }: ConfirmationDialogType) => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <>\r\n      <DialogTitle>{t(title)}</DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText>{t(desc)}</DialogContentText>\r\n      </DialogContent>\r\n    </>\r\n  );\r\n};\r\n","import * as React from 'react';\r\nimport { Box, Snackbar } from '@mui/material';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(props, ref) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\ninterface ErrorSnackbarProps {\r\n  messages: string[];\r\n}\r\n\r\nexport default function ErrorSnackbar({ messages }: ErrorSnackbarProps) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    setOpen(!!messages.length);\r\n  }, [messages]);\r\n\r\n  return (\r\n    <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n      <Box>\r\n        {messages.map((message) => (\r\n          <Alert key={message} severity=\"error\" sx={{ width: '100%', marginBottom: '1em' }}>\r\n            {message}\r\n          </Alert>\r\n        ))}\r\n      </Box>\r\n    </Snackbar>\r\n  );\r\n}\r\n","export const navLinkTitle = ['homePage'];\r\n\r\nexport const settingsProfile = ['editProfile', 'logOut'];\r\n\r\nexport const [EDIT_PROFILE, LOG_OUT] = settingsProfile;\r\n\r\nexport const LOG_OUT_TEXT = 'logOutModal';\r\n\r\nexport const NEW_PROJECT = 'newProject';\r\n","import { Box, TextField, Typography } from '@mui/material';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAppDispatch } from '../../../../hooks/useAppDispatch';\r\nimport { useAppSelector } from '../../../../hooks/useAppSelector';\r\nimport { createProject, fetchProjects } from '../../../../store/reducers/projects/projectsThunks';\r\nimport { TEXT_FIELD_WIDTH } from '../../../constants/constGlobal';\r\nimport { useForm } from 'react-hook-form';\r\nimport { BasicModal } from '../../modal';\r\nimport { pathToPage } from '../../../constants/constRoutes';\r\nimport { Loading } from '../../loading';\r\nimport { useEffect } from 'react';\r\nimport { projectsSlice } from '../../../../store/reducers/projects/projectsSlice';\r\nimport ErrorSnackbar from '../../errorSnackbar/errorSnackbar';\r\n\r\nexport type FormValues = {\r\n  title: string;\r\n  description: string;\r\n};\r\n\r\ninterface NewProjectModalProps {\r\n  isModalActive: boolean;\r\n  closeConfirmationDialog: () => void;\r\n  confirmAction: () => void;\r\n}\r\n\r\nexport const NewProjectModal = ({\r\n  isModalActive,\r\n  closeConfirmationDialog,\r\n  confirmAction,\r\n}: NewProjectModalProps) => {\r\n  const dispatch = useAppDispatch();\r\n  const navigate = useNavigate();\r\n  const { homePath } = pathToPage;\r\n  const { t } = useTranslation();\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm<FormValues>();\r\n  const { newProjectCreated, newProjectCreating, newProjectErrors } = useAppSelector(\r\n    (state) => state.projectsReducer\r\n  );\r\n  const { resetProjectCreated, clearNewProjectErrors } = projectsSlice.actions;\r\n\r\n  const submitForm = (data: FormValues) => {\r\n    const { title, description } = data;\r\n    dispatch(createProject({ projectData: { title, description } }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (newProjectCreated) {\r\n      dispatch(fetchProjects());\r\n      navigate(homePath);\r\n      dispatch(resetProjectCreated());\r\n      confirmAction();\r\n    }\r\n  }, [newProjectCreated, dispatch, navigate, resetProjectCreated, confirmAction, homePath]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch(clearNewProjectErrors());\r\n    };\r\n  }, [dispatch, clearNewProjectErrors]);\r\n\r\n  return (\r\n    <BasicModal\r\n      isActive={isModalActive}\r\n      closeWindow={closeConfirmationDialog}\r\n      confirmAction={handleSubmit(submitForm)}\r\n    >\r\n      {newProjectCreating ? (\r\n        <Loading isLoading={true} />\r\n      ) : (\r\n        <>\r\n          <Typography variant=\"h6\" component=\"h2\">\r\n            {t('newProjectTypography')}\r\n          </Typography>\r\n          <Box sx={{ display: 'flex', flexDirection: 'column' }}>\r\n            <Typography sx={{ mt: 2 }} variant=\"body1\" component=\"p\">\r\n              {t('projectName')}\r\n            </Typography>\r\n            <TextField\r\n              placeholder={t('title')}\r\n              sx={{ mb: 2, mt: 1, width: TEXT_FIELD_WIDTH }}\r\n              {...register('title', { required: 'projectTitleFieldRequiredError' })}\r\n              error={!!errors.title}\r\n              helperText={\r\n                errors.title ? t(String(errors.title.message)) : t('projectTitleFieldHelpText')\r\n              }\r\n            />\r\n            <Typography sx={{ mt: 1 }} variant=\"body1\" component=\"p\">\r\n              {t('projectDesc')}\r\n            </Typography>\r\n            <TextField\r\n              placeholder={t('description')}\r\n              multiline\r\n              rows={5}\r\n              sx={{ mb: 4, mt: 1, width: '17.5rem' }}\r\n              {...register('description', { required: 'projectDescriptionFieldRequiredError' })}\r\n              error={!!errors.description}\r\n              helperText={\r\n                errors.description\r\n                  ? t(String(errors.description.message))\r\n                  : t('projectDescriptionFieldHelpText')\r\n              }\r\n            />\r\n          </Box>\r\n          <ErrorSnackbar messages={newProjectErrors} />\r\n        </>\r\n      )}\r\n    </BasicModal>\r\n  );\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport { NavLink, useNavigate } from 'react-router-dom';\r\nimport {\r\n  EDIT_PROFILE,\r\n  LOG_OUT,\r\n  LOG_OUT_TEXT,\r\n  navLinkTitle,\r\n  settingsProfile,\r\n  NEW_PROJECT,\r\n} from '../../constants/constHeader';\r\nimport { pathToPage } from '../../constants/constRoutes';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport {\r\n  AppBar,\r\n  Avatar,\r\n  Box,\r\n  FormLabel,\r\n  IconButton,\r\n  Menu,\r\n  MenuItem,\r\n  Toolbar,\r\n  Tooltip,\r\n  Typography,\r\n} from '@mui/material';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport './index.scss';\r\nimport { useAppDispatch } from '../../../hooks/useAppDispatch';\r\nimport { langInterfaceSlice } from '../../../store/reducers/langInterfaceSlice';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { ConfirmationDialog } from '../confirmationDialog';\r\nimport { confirmationDialogSlice } from '../../../store/reducers/confirmationDialogSlice';\r\nimport { useAppSelector } from '../../../hooks/useAppSelector';\r\nimport { BasicModal } from '../modal';\r\nimport { logout } from '../../../store/reducers/login/loginSlice';\r\nimport { USER_DATA_KEY, TOKEN_KEY } from '../../constants/constLocalStorage';\r\nimport { NewProjectModal } from './newProjectModal';\r\nimport useScrollTrigger from '@mui/material/useScrollTrigger';\r\n\r\nexport const Header = () => {\r\n  const [anchorElNav, setAnchorElNav] = useState<null | HTMLElement>(null);\r\n  const [anchorElUser, setAnchorElUser] = useState<null | HTMLElement>(null);\r\n  const [color, setColor] = useState<string>('#ffffff');\r\n  const { language } = useAppSelector((state) => state.langInterfaceReducer);\r\n  const [isEnglishLanguage, setIsEnglishLanguage] = useState<boolean>(language === 'en');\r\n  const [infoDialog, setInfoDialog] = useState<string>('');\r\n  const dispatch = useAppDispatch();\r\n  const { isModalActive } = useAppSelector((state) => state.confirmationDialog);\r\n  const { setLanguage } = langInterfaceSlice.actions;\r\n  const { setDialogActivity } = confirmationDialogSlice.actions;\r\n  const { t, i18n } = useTranslation();\r\n  const navigate = useNavigate();\r\n  const { editProfilePath } = pathToPage;\r\n\r\n  useEffect(() => {\r\n    dispatch(setLanguage(isEnglishLanguage ? 'en' : 'ru'));\r\n    i18n.changeLanguage(isEnglishLanguage ? 'en' : 'ru');\r\n  }, [dispatch, i18n, isEnglishLanguage, setLanguage]);\r\n\r\n  const trigger = useScrollTrigger();\r\n\r\n  useEffect(() => {\r\n    getRandomColor();\r\n  }, [trigger]);\r\n\r\n  const handleLanguageChange = (event: React.FormEvent<HTMLInputElement>) => {\r\n    const { checked } = event.currentTarget;\r\n    setIsEnglishLanguage(checked);\r\n  };\r\n\r\n  const handleOpenNavMenu = (event: React.MouseEvent<HTMLElement>) => {\r\n    setAnchorElNav(event.currentTarget);\r\n  };\r\n  const handleOpenUserMenu = (event: React.MouseEvent<HTMLElement>) => {\r\n    setAnchorElUser(event.currentTarget);\r\n  };\r\n\r\n  const handleCloseNavMenu = () => {\r\n    setAnchorElNav(null);\r\n  };\r\n\r\n  const handleCloseUserMenu = () => {\r\n    setAnchorElUser(null);\r\n  };\r\n\r\n  const closeConfirmationDialog = () => {\r\n    dispatch(setDialogActivity(false));\r\n  };\r\n\r\n  const confirmAction = () => {\r\n    switch (infoDialog) {\r\n      case LOG_OUT_TEXT:\r\n        signOut();\r\n        break;\r\n    }\r\n    closeConfirmationDialog();\r\n    setTimeout(() => setInfoDialog(''), 500);\r\n  };\r\n\r\n  const clickMenuItem = (item: string) => {\r\n    switch (item) {\r\n      case EDIT_PROFILE:\r\n        navigate(editProfilePath);\r\n        break;\r\n      case LOG_OUT:\r\n        setInfoDialog(LOG_OUT_TEXT);\r\n        dispatch(setDialogActivity(true));\r\n        break;\r\n      case NEW_PROJECT:\r\n        setInfoDialog(NEW_PROJECT);\r\n        dispatch(setDialogActivity(true));\r\n        break;\r\n    }\r\n    handleCloseUserMenu();\r\n  };\r\n\r\n  const signOut = () => {\r\n    localStorage.removeItem(USER_DATA_KEY);\r\n    localStorage.removeItem(TOKEN_KEY);\r\n    dispatch(logout());\r\n  };\r\n\r\n  const getRandomColor = () => {\r\n    const r = Math.floor(Math.random() * 256);\r\n    const g = Math.floor(Math.random() * 256);\r\n    const b = Math.floor(Math.random() * 256);\r\n    const rgba = `rgba(${r},${g},${b}, .1)`;\r\n    setColor(rgba);\r\n    return rgba;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AppBar\r\n        className=\"header\"\r\n        position=\"sticky\"\r\n        sx={{\r\n          backgroundColor: '#ffffff',\r\n          boxShadow: 'unset',\r\n          borderBottom: 'solid 2px rgba(0, 0, 0, .1)',\r\n          height: '5.2rem',\r\n        }}\r\n      >\r\n        <Box\r\n          sx={{\r\n            backgroundColor: trigger ? color : '#ffffff',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            transition: '.3s',\r\n            height: '5.2rem',\r\n          }}\r\n        >\r\n          <Toolbar disableGutters sx={{ mx: 4, justifyContent: 'space-between', width: '100%' }}>\r\n            <Box sx={{ display: { xs: 'flex', md: 'none' } }}>\r\n              <IconButton\r\n                size=\"large\"\r\n                aria-label=\"navigation\"\r\n                aria-controls=\"menu-appbar\"\r\n                aria-haspopup=\"true\"\r\n                onClick={handleOpenNavMenu}\r\n                color=\"default\"\r\n              >\r\n                <MenuIcon />\r\n              </IconButton>\r\n              <Menu\r\n                id=\"menu-appbar\"\r\n                anchorEl={anchorElNav}\r\n                anchorOrigin={{\r\n                  vertical: 'bottom',\r\n                  horizontal: 'left',\r\n                }}\r\n                keepMounted\r\n                transformOrigin={{\r\n                  vertical: 'top',\r\n                  horizontal: 'left',\r\n                }}\r\n                open={Boolean(anchorElNav)}\r\n                onClose={handleCloseNavMenu}\r\n                sx={{ mt: '12px', display: { xs: 'block', md: 'none' } }}\r\n              >\r\n                {navLinkTitle.map((title) => (\r\n                  <NavLink key={title} to={pathToPage[`${title.slice(0, -2)}th`]}>\r\n                    <MenuItem\r\n                      onClick={handleCloseNavMenu}\r\n                      sx={{\r\n                        border: 'solid 2px rgba(0, 0, 0, .1)',\r\n                        borderTop: 'none',\r\n                        backgroundColor: trigger ? color : '#ffffff',\r\n                      }}\r\n                    >\r\n                      <Typography textAlign=\"center\">{t(title)}</Typography>\r\n                    </MenuItem>\r\n                  </NavLink>\r\n                ))}\r\n              </Menu>\r\n            </Box>\r\n\r\n            <Box\r\n              sx={{ flexGrow: 0, display: { xs: 'none', md: 'flex' }, justifyContent: 'center' }}\r\n            >\r\n              {navLinkTitle.map((title) => (\r\n                <NavLink\r\n                  key={title}\r\n                  to={pathToPage[`${title.slice(0, -2)}th`]}\r\n                  className=\"header__link\"\r\n                  onClick={handleCloseNavMenu}\r\n                >\r\n                  {t(title)}\r\n                </NavLink>\r\n              ))}\r\n            </Box>\r\n            <Box sx={{ display: 'flex', columnGap: '1.5rem' }}>\r\n              <Tooltip title={t('createNewBoardHelperText')}>\r\n                <IconButton\r\n                  onClick={() => clickMenuItem(NEW_PROJECT)}\r\n                  size=\"large\"\r\n                  aria-label=\"create new board\"\r\n                >\r\n                  <AddIcon />\r\n                </IconButton>\r\n              </Tooltip>\r\n              <FormLabel id=\"language-switcher\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  className=\"language-switcher__checkbox\"\r\n                  checked={isEnglishLanguage}\r\n                  onChange={handleLanguageChange}\r\n                />\r\n\r\n                <span id=\"round-slider\"></span>\r\n                <span id=\"select-ru\">RU</span>\r\n                <span id=\"select-en\">EN</span>\r\n              </FormLabel>\r\n              <IconButton\r\n                onClick={handleOpenUserMenu}\r\n                sx={{\r\n                  p: 0,\r\n                }}\r\n              >\r\n                <Avatar\r\n                  src=\"/static/images/avatar.jpg\"\r\n                  sx={{\r\n                    overflow: 'visible',\r\n                    '&:before': {\r\n                      content: '\"❯\"',\r\n                      color: '#ffffff',\r\n                      position: 'absolute',\r\n                      backgroundColor: '#3026b9',\r\n                      borderRadius: '50%',\r\n                      height: '1em',\r\n                      top: '2.6em',\r\n                      left: '0',\r\n                      mt: '-1em',\r\n                      transform: 'rotate(90deg)',\r\n                      width: '1em',\r\n                    },\r\n                  }}\r\n                />\r\n              </IconButton>\r\n              <Menu\r\n                sx={{ mt: '55px' }}\r\n                id=\"menu-appbar\"\r\n                anchorEl={anchorElUser}\r\n                anchorOrigin={{\r\n                  vertical: 'top',\r\n                  horizontal: 'right',\r\n                }}\r\n                keepMounted\r\n                transformOrigin={{\r\n                  vertical: 'top',\r\n                  horizontal: 'right',\r\n                }}\r\n                open={Boolean(anchorElUser)}\r\n                onClose={handleCloseUserMenu}\r\n              >\r\n                {settingsProfile.map((setting) => (\r\n                  <MenuItem\r\n                    key={setting}\r\n                    onClick={() => clickMenuItem(setting)}\r\n                    sx={{\r\n                      border: 'solid 2px rgba(0, 0, 0, .1)',\r\n                      borderTop: 'none',\r\n                      backgroundColor: trigger ? color : '#ffffff',\r\n                    }}\r\n                  >\r\n                    <Typography textAlign=\"center\">{t(setting)}</Typography>\r\n                  </MenuItem>\r\n                ))}\r\n              </Menu>\r\n            </Box>\r\n          </Toolbar>\r\n        </Box>\r\n      </AppBar>\r\n      {infoDialog === NEW_PROJECT ? (\r\n        <NewProjectModal\r\n          isModalActive={isModalActive}\r\n          closeConfirmationDialog={closeConfirmationDialog}\r\n          confirmAction={confirmAction}\r\n        />\r\n      ) : (\r\n        <BasicModal\r\n          isActive={isModalActive}\r\n          closeWindow={closeConfirmationDialog}\r\n          confirmAction={confirmAction}\r\n        >\r\n          <ConfirmationDialog title=\"titleModal\" desc={infoDialog} />\r\n        </BasicModal>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import Box from '@mui/material/Box';\r\nimport Modal from '@mui/material/Modal';\r\nimport { BasicModalType } from '../../types';\r\nimport { PrimaryBtn } from '../button';\r\nimport './index.scss';\r\n\r\nconst style = {\r\n  position: 'absolute',\r\n  top: '50%',\r\n  left: '50%',\r\n  transform: 'translate(-50%, -50%)',\r\n  bgcolor: 'background.paper',\r\n  border: '2px solid #000',\r\n  boxShadow: 24,\r\n  paddingLeft: 10,\r\n  paddingRight: 10,\r\n  paddingTop: 4,\r\n  paddingBottom: 4,\r\n};\r\n\r\nexport const BasicModal = ({ isActive, closeWindow, confirmAction, children }: BasicModalType) => (\r\n  <Modal open={isActive} onClose={closeWindow}>\r\n    <Box sx={style}>\r\n      {children}\r\n      <div className=\"modal-btn-wrapp\">\r\n        <PrimaryBtn variant=\"contained\" text=\"btnDialogOk\" onClick={confirmAction} />\r\n        <PrimaryBtn variant=\"contained\" text=\"btnDialogCancel\" onClick={closeWindow} />\r\n      </div>\r\n    </Box>\r\n  </Modal>\r\n);\r\n","import { useEffect } from 'react';\r\nimport { useAppSelector } from '../../../hooks/useAppSelector';\r\nimport { useAppDispatch } from '../../../hooks/useAppDispatch';\r\nimport { fetchUsers } from '../../../store/reducers/users/usersThunks';\r\nimport { setCurrentUser } from '../../../store/reducers/users/usersSlice';\r\nimport { Loading } from '../../components/loading';\r\nimport { USER_DATA_KEY } from '../../constants/constLocalStorage';\r\n\r\nexport const RequireUser = ({ children }: { children: JSX.Element }) => {\r\n  const { currentUser } = useAppSelector((state) => state.usersReducer);\r\n  const { users } = useAppSelector((state) => state.usersReducer);\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    const currentUserData = users.find((user) => user.login === currentUser.login);\r\n    if (!currentUserData) {\r\n      dispatch(fetchUsers());\r\n    } else {\r\n      localStorage.setItem(USER_DATA_KEY, JSON.stringify(currentUserData));\r\n      dispatch(setCurrentUser(currentUserData));\r\n    }\r\n  }, [users, currentUser, dispatch]);\r\n\r\n  if (!currentUser.id) {\r\n    return <Loading isLoading={true} />;\r\n  }\r\n\r\n  return children;\r\n};\r\n","export const PRIMARY_COLOR = '#3026b9';\r\nexport const BACKGROUND_COLOR = '#fafcff';\r\nexport const COLUMN_COLOR = '#f4f5f8';\r\nexport const TEXT_FIELD_WIDTH = '17.5rem';\r\n","import { useAppDispatch } from '../../../hooks/useAppDispatch';\r\nimport ClearIcon from '@mui/icons-material/Clear';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useAppSelector } from '../../../hooks/useAppSelector';\r\nimport {\r\n  setTaskData,\r\n  setIsModalFormOpen,\r\n  setmodalAction,\r\n  setIsTaskShown,\r\n} from '../../../store/reducers/board/boardSlice';\r\nimport { ModalAction } from '../../../modules/types';\r\nimport { Typography, IconButton, Tooltip, Card, CardContent, CardActions } from '@mui/material';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\n\r\ntype TaskProps = {\r\n  id: string;\r\n  title: string;\r\n  order: number;\r\n  description: string;\r\n  columnId: string;\r\n  userId: string;\r\n};\r\nexport const Task = ({ id, title, order, description, columnId, userId }: TaskProps) => {\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n  const { projectId } = useAppSelector((state) => state.projectByIdReducer);\r\n\r\n  const setData = () => {\r\n    dispatch(\r\n      setTaskData({\r\n        title,\r\n        description,\r\n        order,\r\n        columnId,\r\n        boardId: projectId,\r\n        userId,\r\n        id,\r\n      })\r\n    );\r\n  };\r\n\r\n  const onClick = (action: ModalAction) => {\r\n    dispatch(setmodalAction(action));\r\n    setData();\r\n    dispatch(setIsModalFormOpen(true));\r\n  };\r\n\r\n  const showTask = () => {\r\n    setData();\r\n    dispatch(setIsTaskShown(true));\r\n  };\r\n\r\n  return (\r\n    <Draggable draggableId={id} index={order - 1}>\r\n      {(provided) => (\r\n        <Card\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n          sx={{\r\n            width: { xs: '11rem', md: '22rem' },\r\n            ml: '1.5rem',\r\n            mb: '1.5rem',\r\n            position: 'relative',\r\n          }}\r\n        >\r\n          <CardContent onClick={showTask}>\r\n            <Typography\r\n              gutterBottom\r\n              variant=\"h5\"\r\n              component=\"h5\"\r\n              sx={{ pr: { xs: '0', md: '5rem' }, pt: { xs: '2rem', md: '0' } }}\r\n            >\r\n              {title}\r\n            </Typography>\r\n            <Typography\r\n              variant=\"body2\"\r\n              component=\"p\"\r\n              color=\"text.secondary\"\r\n              sx={{ fontSize: '1.1rem' }}\r\n            >\r\n              {description.length > 100 ? `${description.slice(0, 100)}...` : description}\r\n            </Typography>\r\n          </CardContent>\r\n          <CardActions disableSpacing sx={{ position: 'absolute', right: '0', top: '0' }}>\r\n            <Tooltip title={t('updateTaskButton')} onClick={() => onClick('updateTask')}>\r\n              <IconButton aria-label=\"edit task\">\r\n                <EditIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n            <Tooltip title={t('deleteTaskButton')}>\r\n              <IconButton aria-label=\"delete task\" onClick={() => onClick('deleteTask')}>\r\n                <ClearIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </CardActions>\r\n        </Card>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n","import HighlightOffIcon from '@mui/icons-material/HighlightOff';\r\nimport CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport ClearIcon from '@mui/icons-material/Clear';\r\nimport { useTranslation } from 'react-i18next';\r\nimport React, { useState } from 'react';\r\nimport { TaskType } from '../../types';\r\nimport { useAppDispatch } from '../../../hooks/useAppDispatch';\r\nimport { PRIMARY_COLOR, COLUMN_COLOR } from '../../constants/constGlobal';\r\n\r\nimport {\r\n  Typography,\r\n  Box,\r\n  Button,\r\n  List,\r\n  IconButton,\r\n  InputAdornment,\r\n  OutlinedInput,\r\n  Tooltip,\r\n} from '@mui/material';\r\nimport {\r\n  setTaskData,\r\n  setIsModalFormOpen,\r\n  setmodalAction,\r\n  setColumnData,\r\n} from '../../../store/reducers/board/boardSlice';\r\nimport { updateColumn } from '../../../store/reducers/board/boardThunks';\r\nimport { useAppSelector } from '../../../hooks/useAppSelector';\r\nimport { Task } from '../task';\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\ntype ColumnProps = {\r\n  id: string;\r\n  title: string;\r\n  order: number;\r\n  tasks: TaskType[];\r\n};\r\n\r\nexport const Column = ({ id, title, order, tasks }: ColumnProps) => {\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n  const [isEditing, setIsEditing] = useState<boolean>(false);\r\n  const columnTitle: React.RefObject<HTMLInputElement> = React.createRef();\r\n  const { projectId } = useAppSelector((state) => state.projectByIdReducer);\r\n  const { currentUser: user } = useAppSelector((state) => state.usersReducer);\r\n\r\n  const onConfirm = () => {\r\n    dispatch(\r\n      updateColumn({\r\n        columnId: id,\r\n        columnData: { title: columnTitle?.current?.value || '', order },\r\n      })\r\n    ).then(() => setIsEditing(false));\r\n  };\r\n\r\n  const onClick = () => {\r\n    dispatch(setmodalAction('createTask'));\r\n    dispatch(\r\n      setTaskData({\r\n        title: '',\r\n        description: '',\r\n        order: tasks.length,\r\n        columnId: id,\r\n        boardId: projectId,\r\n        userId: user.id,\r\n        id: '',\r\n      })\r\n    );\r\n    dispatch(setIsModalFormOpen(true));\r\n  };\r\n\r\n  const del = () => {\r\n    dispatch(setmodalAction('deleteColumn'));\r\n    dispatch(setColumnData({ id, title, order }));\r\n    dispatch(setIsModalFormOpen(true));\r\n  };\r\n\r\n  const onCancel = () => {\r\n    setIsEditing(false);\r\n  };\r\n\r\n  return (\r\n    <Draggable draggableId={id} index={order - 1}>\r\n      {(provided) => (\r\n        <Box>\r\n          <Box\r\n            {...provided.draggableProps}\r\n            ref={provided.innerRef}\r\n            sx={{\r\n              width: { xs: '14rem', md: '25rem' },\r\n              height: 'calc(100vh - 26rem)',\r\n              backgroundColor: COLUMN_COLOR,\r\n              display: 'flex',\r\n              flexDirection: 'column',\r\n              alignItems: 'center',\r\n              position: 'relative',\r\n              pb: '2.3rem',\r\n              mr: { xs: '1rem', md: '2rem' },\r\n            }}\r\n          >\r\n            <Box\r\n              {...provided.dragHandleProps}\r\n              sx={{\r\n                display: 'flex',\r\n                justifyContent: 'end',\r\n                height: '3rem',\r\n                width: '100%',\r\n                alignItems: 'center',\r\n                backgroundColor: PRIMARY_COLOR,\r\n              }}\r\n            >\r\n              <Tooltip title={t('deleteColumnButton')}>\r\n                <IconButton aria-label=\"delete column\" sx={{ color: '#ffffff' }} onClick={del}>\r\n                  <ClearIcon />\r\n                </IconButton>\r\n              </Tooltip>\r\n            </Box>\r\n            {isEditing ? (\r\n              <OutlinedInput\r\n                id=\"column-title\"\r\n                defaultValue={title}\r\n                sx={{ width: '100%', fontSize: '1.5rem', fontWeight: '400' }}\r\n                inputRef={columnTitle}\r\n                autoFocus\r\n                endAdornment={\r\n                  <InputAdornment position=\"end\">\r\n                    <IconButton aria-label=\"change column title\" onClick={onConfirm} edge=\"end\">\r\n                      <CheckCircleOutlineIcon />\r\n                    </IconButton>\r\n                    <IconButton aria-label=\"cancel changes\" onClick={onCancel} edge=\"end\">\r\n                      <HighlightOffIcon />\r\n                    </IconButton>\r\n                  </InputAdornment>\r\n                }\r\n              />\r\n            ) : (\r\n              <Typography\r\n                variant=\"h5\"\r\n                component=\"p\"\r\n                sx={{ p: '1rem', width: '100%' }}\r\n                onClick={() => setIsEditing(true)}\r\n              >\r\n                {title}\r\n              </Typography>\r\n            )}\r\n            <Droppable droppableId={id} type=\"task\">\r\n              {(provided, snapshot) => (\r\n                <List\r\n                  ref={provided.innerRef}\r\n                  {...provided.droppableProps}\r\n                  sx={{\r\n                    width: '100%',\r\n                    overflowY: 'auto',\r\n                    height: '100%',\r\n                    backgroundColor: snapshot.isDraggingOver ? 'rgba(48, 38, 185, .1)' : 'none',\r\n                  }}\r\n                >\r\n                  {tasks.map((task) => (\r\n                    <Task\r\n                      key={task.id}\r\n                      id={task.id}\r\n                      title={task.title}\r\n                      order={task.order}\r\n                      description={task.description}\r\n                      columnId={id}\r\n                      userId={task.userId}\r\n                    />\r\n                  ))}\r\n                </List>\r\n              )}\r\n            </Droppable>\r\n            <Button\r\n              variant=\"text\"\r\n              disableRipple\r\n              onClick={onClick}\r\n              sx={{ position: 'absolute', bottom: '0', left: '0', color: PRIMARY_COLOR }}\r\n              startIcon={<AddIcon />}\r\n            >\r\n              {t('addTaskButton')}\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n","import {\r\n  Typography,\r\n  Box,\r\n  Button,\r\n  TextField,\r\n  Alert,\r\n  Snackbar,\r\n  Dialog,\r\n  DialogContent,\r\n} from '@mui/material';\r\nimport { PrimaryBtn } from '../../components/button/index';\r\nimport ExitToAppIcon from '@mui/icons-material/ExitToApp';\r\nimport FullscreenIcon from '@mui/icons-material/Fullscreen';\r\nimport FullscreenExitIcon from '@mui/icons-material/FullscreenExit';\r\nimport { useAppDispatch } from '../../../hooks/useAppDispatch';\r\nimport { BasicModal } from '../../components/modal';\r\nimport {\r\n  setError,\r\n  setmodalAction,\r\n  setIsModalFormOpen,\r\n  changeColumnOrder,\r\n  changeTaskOrder,\r\n  setIsTaskShown,\r\n} from '../../../store/reducers/board/boardSlice';\r\nimport {\r\n  getBoard,\r\n  createColumn,\r\n  createTask,\r\n  deleteTask,\r\n  deleteColumn,\r\n  updateTask,\r\n  updateTaskOrder,\r\n  updateColumnOrder,\r\n} from '../../../store/reducers/board/boardThunks';\r\nimport { useAppSelector } from '../../../hooks/useAppSelector';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Column } from '../../components/column';\r\nimport { BACKGROUND_COLOR, TEXT_FIELD_WIDTH } from '../../constants/constGlobal';\r\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\r\nimport { ConfirmationDialog } from '../../components/confirmationDialog';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Header } from '../../components/header';\r\n\r\nexport const Board = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n  const [isFullscreen, setisFullscreen] = useState<boolean>(document.fullscreen);\r\n  const {\r\n    board,\r\n    error,\r\n    modalAction,\r\n    taskData,\r\n    columnData,\r\n    isModalFormOpen,\r\n    isTaskShown,\r\n    dropResult,\r\n  } = useAppSelector((state) => state.boardReducer);\r\n  const { projectId } = useAppSelector((state) => state.projectByIdReducer);\r\n  const { currentUser: user } = useAppSelector((state) => state.usersReducer);\r\n  const titleInput: React.RefObject<HTMLInputElement> = React.createRef();\r\n  const taskDescription: React.RefObject<HTMLInputElement> = React.createRef();\r\n  const navigate = useNavigate();\r\n  const goBack = () => navigate(-1);\r\n\r\n  useEffect(() => {\r\n    dispatch(getBoard());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const result = dropResult;\r\n    if (result) {\r\n      if (result.type === 'task') {\r\n        dispatch(updateTaskOrder(result));\r\n      }\r\n      if (result.type === 'column') {\r\n        dispatch(updateColumnOrder(result));\r\n      }\r\n    }\r\n  }, [dropResult]);\r\n\r\n  const onFullscreen = () => {\r\n    if (!document.fullscreen) {\r\n      document.documentElement.requestFullscreen();\r\n      return;\r\n    }\r\n    document.exitFullscreen();\r\n  };\r\n\r\n  const fullscreenHandler = () => {\r\n    if (!document.fullscreen) {\r\n      setisFullscreen(false);\r\n      return;\r\n    }\r\n    setisFullscreen(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('fullscreenchange', fullscreenHandler);\r\n    return () => {\r\n      document.removeEventListener('fullscreenchange', fullscreenHandler);\r\n    };\r\n  }, []);\r\n\r\n  const closeFormModal = () => {\r\n    dispatch(setIsModalFormOpen(false));\r\n  };\r\n\r\n  const confirmAction = () => {\r\n    const title = titleInput?.current?.value || '';\r\n    const description = taskDescription?.current?.value || '';\r\n    const columnId = taskData?.columnId || '';\r\n    const order = taskData?.order || 0;\r\n    const taskId = taskData?.id || '';\r\n\r\n    switch (modalAction) {\r\n      case 'createColumn': {\r\n        dispatch(createColumn({ title })).then(() => closeFormModal());\r\n        break;\r\n      }\r\n      case 'createTask': {\r\n        dispatch(createTask({ columnId, taskData: { title, description, userId: user.id } })).then(\r\n          () => closeFormModal()\r\n        );\r\n        break;\r\n      }\r\n      case 'updateTask': {\r\n        dispatch(\r\n          updateTask({\r\n            columnId,\r\n            taskId,\r\n            taskData: { title, order, description, userId: user.id, boardId: projectId, columnId },\r\n          })\r\n        ).then(() => closeFormModal());\r\n        break;\r\n      }\r\n      case 'deleteTask': {\r\n        dispatch(deleteTask({ columnId, taskId, order })).then(() => closeFormModal());\r\n        break;\r\n      }\r\n      case 'deleteColumn': {\r\n        const columnId = columnData?.id || '';\r\n        const order = columnData?.order || 0;\r\n        dispatch(deleteColumn({ columnId, order })).then(() => closeFormModal());\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  const clearError = () => dispatch(setError(null));\r\n\r\n  const getModalContent = () => {\r\n    switch (modalAction) {\r\n      case 'createColumn':\r\n        return (\r\n          <>\r\n            <Typography variant=\"h6\" component=\"h3\">\r\n              {t('createColumnTypography')}\r\n            </Typography>\r\n            <Typography sx={{ mt: 2 }} variant=\"body1\" component=\"p\">\r\n              {t('columnTitle')}\r\n            </Typography>\r\n            <TextField\r\n              placeholder={t('title')}\r\n              sx={{ mb: 4, mt: 1, width: TEXT_FIELD_WIDTH }}\r\n              inputRef={titleInput}\r\n            />\r\n          </>\r\n        );\r\n\r\n      case 'createTask':\r\n      case 'updateTask':\r\n        return (\r\n          <>\r\n            <Typography variant=\"h6\" component=\"h3\">\r\n              {t(`${modalAction}Typography`)}\r\n            </Typography>\r\n            <Box sx={{ display: 'flex', flexDirection: 'column' }}>\r\n              <Typography sx={{ mt: 2, width: TEXT_FIELD_WIDTH }} variant=\"body1\" component=\"p\">\r\n                {t('taskTitle')}\r\n              </Typography>\r\n              <TextField\r\n                placeholder={t('title')}\r\n                defaultValue={taskData?.title}\r\n                inputRef={titleInput}\r\n                sx={{ mb: 2, mt: 1 }}\r\n              />\r\n              <Typography sx={{ mt: 2 }} variant=\"body1\" component=\"p\">\r\n                {t('taskDesc')}\r\n              </Typography>\r\n              <TextField\r\n                placeholder={t('description')}\r\n                multiline\r\n                rows={5}\r\n                defaultValue={taskData?.description}\r\n                inputRef={taskDescription}\r\n                sx={{ mb: 4, mt: 1, width: TEXT_FIELD_WIDTH }}\r\n              />\r\n            </Box>\r\n          </>\r\n        );\r\n      case 'deleteTask':\r\n        return <ConfirmationDialog title=\"titleModal\" desc=\"deleteTaskModal\" />;\r\n      case 'deleteColumn':\r\n        return <ConfirmationDialog title=\"titleModal\" desc=\"deleteColumnModal\" />;\r\n    }\r\n  };\r\n\r\n  const onClick = () => {\r\n    dispatch(setmodalAction('createColumn'));\r\n    dispatch(setIsModalFormOpen(true));\r\n  };\r\n\r\n  const onDragEnd = (result: DropResult) => {\r\n    const { destination, source, type } = result;\r\n    if (!destination) {\r\n      return;\r\n    }\r\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\r\n      return;\r\n    }\r\n    if (type === 'task') {\r\n      dispatch(changeTaskOrder(result));\r\n    }\r\n    if (type === 'column') {\r\n      dispatch(changeColumnOrder(result));\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Box sx={{ backgroundColor: BACKGROUND_COLOR, height: 'calc(100vh - 10.5rem)' }}>\r\n        <Box sx={{ mx: '2.3rem' }}>\r\n          <Box\r\n            sx={{\r\n              display: 'flex',\r\n              justifyContent: 'space-between',\r\n              my: '1.5rem',\r\n              alignItems: 'center',\r\n            }}\r\n          >\r\n            <Typography sx={{ fontSize: '2.5rem' }} component=\"h1\">\r\n              {t('boardPageTitle')}\r\n            </Typography>\r\n            <Box sx={{ height: '3rem', display: 'flex' }}>\r\n              <PrimaryBtn\r\n                text={t('addColumnButton')}\r\n                variant=\"contained\"\r\n                onClick={onClick}\r\n              ></PrimaryBtn>\r\n            </Box>\r\n          </Box>\r\n          <Box sx={{ display: 'flex', justifyContent: 'flex-end', columnGap: '1rem' }}>\r\n            <Button\r\n              sx={{ visibility: { xs: 'hidden', md: 'visible' } }}\r\n              variant=\"outlined\"\r\n              onClick={onFullscreen}\r\n              startIcon={isFullscreen ? <FullscreenExitIcon /> : <FullscreenIcon />}\r\n            >\r\n              {t('fullscreen')}\r\n            </Button>\r\n            <Button variant=\"outlined\" onClick={goBack} startIcon={<ExitToAppIcon />}>\r\n              {t('goBack')}\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n          <Box sx={{ overflowX: 'auto', m: '2.3rem', mb: '0' }}>\r\n            <Droppable droppableId=\"allColumns\" direction=\"horizontal\" type=\"column\">\r\n              {(provided) => (\r\n                <div\r\n                  {...provided.droppableProps}\r\n                  ref={provided.innerRef}\r\n                  style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'flex-start',\r\n                    minWidth: 'min-content',\r\n                  }}\r\n                >\r\n                  {board.columns.map((column) => (\r\n                    <Column\r\n                      key={column.id}\r\n                      id={column.id}\r\n                      title={column.title}\r\n                      order={column.order}\r\n                      tasks={column.tasks}\r\n                    ></Column>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </Droppable>\r\n          </Box>\r\n        </DragDropContext>\r\n        <BasicModal\r\n          isActive={isModalFormOpen}\r\n          closeWindow={closeFormModal}\r\n          confirmAction={confirmAction}\r\n        >\r\n          {getModalContent()}\r\n        </BasicModal>\r\n        <Dialog onClose={() => dispatch(setIsTaskShown(false))} open={isTaskShown}>\r\n          <DialogContent sx={{ px: 10, py: 4, maxHeight: '20rem' }}>\r\n            <Typography variant=\"h6\" component=\"h3\" sx={{ mb: 2 }}>\r\n              {taskData?.title}\r\n            </Typography>\r\n            <Typography variant=\"body1\" component=\"p\">\r\n              {taskData?.description}\r\n            </Typography>\r\n          </DialogContent>\r\n        </Dialog>\r\n        <Snackbar open={Boolean(error)} autoHideDuration={6000} onClose={clearError}>\r\n          <Alert onClose={clearError} severity=\"error\" sx={{ width: '100%' }}>\r\n            {error}\r\n          </Alert>\r\n        </Snackbar>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n","import { Board } from './Board';\r\nimport { RequireUser } from '../../components/requireUser';\r\n\r\nconst BoardPage = () => (\r\n  <RequireUser>\r\n    <Board />\r\n  </RequireUser>\r\n);\r\n\r\nexport default BoardPage;\r\n"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","PrimaryBtn","variant","text","onClick","t","useTranslation","sx","backgroundColor","PRIMARY_COLOR","ConfirmationDialog","title","desc","DialogTitle","DialogContent","DialogContentText","Alert","React","props","ref","elevation","ErrorSnackbar","messages","open","setOpen","length","autoHideDuration","onClose","map","message","severity","width","marginBottom","navLinkTitle","settingsProfile","EDIT_PROFILE","LOG_OUT","LOG_OUT_TEXT","NEW_PROJECT","NewProjectModal","isModalActive","closeConfirmationDialog","confirmAction","dispatch","navigate","useNavigate","homePath","pathToPage","useForm","register","handleSubmit","errors","formState","state","projectsReducer","newProjectCreated","newProjectCreating","newProjectErrors","projectsSlice","resetProjectCreated","clearNewProjectErrors","useEffect","fetchProjects","isActive","closeWindow","data","description","createProject","projectData","isLoading","Typography","component","Box","display","flexDirection","mt","TextField","placeholder","mb","TEXT_FIELD_WIDTH","required","error","helperText","String","multiline","rows","Header","useState","anchorElNav","setAnchorElNav","anchorElUser","setAnchorElUser","color","setColor","language","langInterfaceReducer","isEnglishLanguage","setIsEnglishLanguage","infoDialog","setInfoDialog","confirmationDialog","setLanguage","langInterfaceSlice","setDialogActivity","confirmationDialogSlice","i18n","editProfilePath","changeLanguage","trigger","useScrollTrigger","getRandomColor","handleCloseNavMenu","handleCloseUserMenu","signOut","setTimeout","clickMenuItem","item","localStorage","removeItem","USER_DATA_KEY","TOKEN_KEY","logout","r","Math","floor","random","g","b","rgba","AppBar","className","position","boxShadow","borderBottom","height","alignItems","transition","Toolbar","disableGutters","mx","justifyContent","xs","md","IconButton","size","event","currentTarget","Menu","id","anchorEl","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","Boolean","to","slice","MenuItem","border","borderTop","textAlign","flexGrow","columnGap","Tooltip","Add","FormLabel","type","checked","onChange","p","Avatar","src","overflow","content","borderRadius","top","left","transform","setting","style","bgcolor","paddingLeft","paddingRight","paddingTop","paddingBottom","BasicModal","children","Modal","RequireUser","currentUser","usersReducer","users","currentUserData","find","user","login","setItem","JSON","stringify","setCurrentUser","fetchUsers","BACKGROUND_COLOR","COLUMN_COLOR","Task","order","columnId","userId","projectId","projectByIdReducer","setData","setTaskData","boardId","action","setmodalAction","setIsModalFormOpen","showTask","setIsTaskShown","draggableId","index","provided","Card","innerRef","draggableProps","dragHandleProps","ml","CardContent","gutterBottom","pr","pt","fontSize","CardActions","disableSpacing","right","Edit","Clear","Column","tasks","isEditing","setIsEditing","columnTitle","onConfirm","updateColumn","columnData","current","value","then","del","setColumnData","onCancel","pb","mr","OutlinedInput","defaultValue","fontWeight","inputRef","autoFocus","endAdornment","InputAdornment","edge","CheckCircleOutline","HighlightOff","droppableId","snapshot","List","droppableProps","overflowY","isDraggingOver","task","Button","disableRipple","bottom","startIcon","Board","document","fullscreen","isFullscreen","setisFullscreen","boardReducer","board","modalAction","taskData","isModalFormOpen","isTaskShown","dropResult","titleInput","taskDescription","getBoard","result","updateTaskOrder","updateColumnOrder","fullscreenHandler","addEventListener","removeEventListener","closeFormModal","clearError","setError","my","visibility","exitFullscreen","documentElement","requestFullscreen","FullscreenExit","Fullscreen","ExitToApp","onDragEnd","destination","source","changeTaskOrder","changeColumnOrder","overflowX","m","direction","minWidth","columns","column","taskId","createColumn","createTask","updateTask","deleteTask","deleteColumn","getModalContent","Dialog","px","py","maxHeight","Snackbar"],"sourceRoot":""}