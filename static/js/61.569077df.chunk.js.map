{"version":3,"file":"static/js/61.569077df.chunk.js","mappings":"kLAGaA,EAAiB,kBAAMC,EAAAA,EAAAA,Q,6HCC9BC,EAAQC,EAAAA,YAA6C,SAAeC,EAAOC,GAC/E,OAAO,SAAC,KAAD,QAAUC,UAAW,EAAGD,IAAKA,EAAKE,QAAQ,UAAaH,OAOjD,SAASI,EAAT,GAA0D,IAAjCC,EAAgC,EAAhCA,SACtC,EAAwBN,EAAAA,UAAe,GAAvC,eAAOO,EAAP,KAAaC,EAAb,KASA,OAJAR,EAAAA,WAAgB,WACdQ,IAAUF,EAASG,UAClB,CAACH,KAGF,SAAC,IAAD,CAAUC,KAAMA,EAAMG,iBAAkB,IAAMC,QAT5B,WAClBH,GAAQ,IAQR,UACE,SAAC,IAAD,UACGF,EAASM,KAAI,SAACC,GAAD,OACZ,SAACd,EAAD,CAAqBe,SAAS,QAAQC,GAAI,CAAEC,MAAO,OAAQC,aAAc,OAAzE,SACGJ,GADSA,Y,yNCxBtB,ECiBsB,WACpB,IAAQK,GAAMC,EAAAA,EAAAA,KAAND,EACR,GAAiDE,EAAAA,EAAAA,IAAe,SAACC,GAAD,OAAWA,EAAMC,gBAAzEC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAeC,EAAhC,EAAwBC,OAClBC,GAAW9B,EAAAA,EAAAA,KACjB,GAII+B,EAAAA,EAAAA,MAHFC,EADF,EACEA,SACAC,EAFF,EAEEA,aACaJ,EAHf,EAGEK,UAAaL,OAiBf,OANAM,EAAAA,EAAAA,YAAU,WACR,OAAO,WACLL,GAASM,EAAAA,EAAAA,UAEV,CAACN,IAEAH,GACK,uBAAIN,EAAE,kBAGXK,GACK,SAAC,IAAD,CAASW,WAAW,KAI3B,kBAAMC,UAAU,aAAaC,SAAUN,GAvBtB,SAACO,GAClB,IAAQC,EAAoBD,EAApBC,MAAOC,EAAaF,EAAbE,SACTC,EAAW,CAAEC,GAAI,GAAIH,MAAAA,EAAOI,KAAM,IACxCC,aAAaC,QAAQC,EAAAA,EAAeC,KAAKC,UAAUP,IACnDb,GAASqB,EAAAA,EAAAA,GAAO,CAAEV,MAAAA,EAAOC,SAAAA,KACzBZ,GAASsB,EAAAA,EAAAA,IAAeT,OAkBxB,WACE,SAACU,EAAA,GAAD,gBACEC,MAAOjC,EAAE,mBACTiB,UAAU,0BACViB,KAAK,OACLC,aAAa,YACbtC,GAAI,CAAEuC,UAAW,QACbzB,EAAS,QAAS,CAAE0B,SAAU,6BANpC,IAOEC,QAAS9B,EAAOY,MAChBmB,WAAY/B,EAAOY,MAAQpB,EAAEwC,OAAOhC,EAAOY,MAAMzB,UAAYK,EAAE,gCAEjE,SAACgC,EAAA,GAAD,gBACEC,MAAOjC,EAAE,sBACTiB,UAAU,0BACViB,KAAK,WACLC,aAAa,mBACbtC,GAAI,CAAEuC,UAAW,QACbzB,EAAS,WAAY,CAAE0B,SAAU,gCANvC,IAOEC,QAAS9B,EAAOa,SAChBkB,WACE/B,EAAOa,SAAWrB,EAAEwC,OAAOhC,EAAOa,SAAS1B,UAAYK,EAAE,mCAG7D,SAACyC,EAAA,EAAD,CAAQP,KAAK,SAASrC,GAAI,CAAEuC,UAAW,OAAvC,SACGpC,EAAE,2BAEL,SAAC,IAAD,CAAeZ,SAAUmB","sources":["hooks/useAppDispatch.ts","modules/components/errorSnackbar/errorSnackbar.tsx","modules/pages/login/signin/index.tsx","modules/pages/login/signin/Signin.tsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\r\nimport { AppDispatch } from '../store/store';\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\n","import * as React from 'react';\r\nimport { Box, Snackbar } from '@mui/material';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(props, ref) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\ninterface ErrorSnackbarProps {\r\n  messages: string[];\r\n}\r\n\r\nexport default function ErrorSnackbar({ messages }: ErrorSnackbarProps) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    setOpen(!!messages.length);\r\n  }, [messages]);\r\n\r\n  return (\r\n    <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n      <Box>\r\n        {messages.map((message) => (\r\n          <Alert key={message} severity=\"error\" sx={{ width: '100%', marginBottom: '1em' }}>\r\n            {message}\r\n          </Alert>\r\n        ))}\r\n      </Box>\r\n    </Snackbar>\r\n  );\r\n}\r\n","import { SignIn } from './Signin';\r\n\r\nexport default SignIn;\r\n","import { useEffect } from 'react';\r\nimport { useAppSelector } from '../../../../hooks/useAppSelector';\r\nimport { useAppDispatch } from '../../../../hooks/useAppDispatch';\r\nimport { signin } from '../../../../store/reducers/login/loginThunks';\r\nimport { TextField, Button } from '@mui/material';\r\nimport ErrorSnackbar from '../../../components/errorSnackbar/errorSnackbar';\r\nimport { clearErrors } from '../../../../store/reducers/login/loginSlice';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { USER_DATA_KEY } from '../../../constants/constLocalStorage';\r\n\r\nimport { setCurrentUser } from '../../../../store/reducers/users/usersSlice';\r\nimport { Loading } from '../../../components/loading';\r\n\r\nexport type FormValues = {\r\n  login: string;\r\n  password: string;\r\n};\r\n\r\nexport const SignIn = () => {\r\n  const { t } = useTranslation();\r\n  const { loading, token, errors: serverErrors } = useAppSelector((state) => state.loginReducer);\r\n  const dispatch = useAppDispatch();\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm<FormValues>();\r\n\r\n  const submitForm = (data: FormValues) => {\r\n    const { login, password } = data;\r\n    const userData = { id: '', login, name: '' };\r\n    localStorage.setItem(USER_DATA_KEY, JSON.stringify(userData));\r\n    dispatch(signin({ login, password }));\r\n    dispatch(setCurrentUser(userData));\r\n  };\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch(clearErrors());\r\n    };\r\n  }, [dispatch]);\r\n\r\n  if (token) {\r\n    return <p>{t('userLoggedIn')}</p>;\r\n  }\r\n\r\n  if (loading) {\r\n    return <Loading isLoading={true} />;\r\n  }\r\n\r\n  return (\r\n    <form className=\"login-form\" onSubmit={handleSubmit(submitForm)}>\r\n      <TextField\r\n        label={t('loginFieldLabel')}\r\n        className=\"login-form__field-input\"\r\n        type=\"text\"\r\n        autoComplete=\"userlogin\"\r\n        sx={{ marginTop: '1em' }}\r\n        {...register('login', { required: 'loginFieldRequiredError' })}\r\n        error={!!errors.login}\r\n        helperText={errors.login ? t(String(errors.login.message)) : t('loginFieldSignInHelpText')}\r\n      />\r\n      <TextField\r\n        label={t('passwordFieldLabel')}\r\n        className=\"login-form__field-input\"\r\n        type=\"password\"\r\n        autoComplete=\"current-password\"\r\n        sx={{ marginTop: '1em' }}\r\n        {...register('password', { required: 'passwordFieldRequiredError' })}\r\n        error={!!errors.password}\r\n        helperText={\r\n          errors.password ? t(String(errors.password.message)) : t('passwordFieldSignInHelpText')\r\n        }\r\n      />\r\n      <Button type=\"submit\" sx={{ marginTop: '1em' }}>\r\n        {t('signInFormButtonText')}\r\n      </Button>\r\n      <ErrorSnackbar messages={serverErrors} />\r\n    </form>\r\n  );\r\n};\r\n"],"names":["useAppDispatch","useDispatch","Alert","React","props","ref","elevation","variant","ErrorSnackbar","messages","open","setOpen","length","autoHideDuration","onClose","map","message","severity","sx","width","marginBottom","t","useTranslation","useAppSelector","state","loginReducer","loading","token","serverErrors","errors","dispatch","useForm","register","handleSubmit","formState","useEffect","clearErrors","isLoading","className","onSubmit","data","login","password","userData","id","name","localStorage","setItem","USER_DATA_KEY","JSON","stringify","signin","setCurrentUser","TextField","label","type","autoComplete","marginTop","required","error","helperText","String","Button"],"sourceRoot":""}